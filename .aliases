# .aliases
# vim:ft=zsh:

alias ll='LC_COLLATE=C ls -AalFh'

dir() {
  {
    LL=$(ll "${@}")
    echo "${LL}" | awk '/^d/ {print $0}'
    echo "${LL}" | awk '! /^(d|total)/ {print $0}'
    echo "${LL}" | awk '/^total/ {print $0}'
  } | ${PAGER:-less}
}

if exa >/dev/null 2>&1; then
  alias ls='\exa --color=always'
  alias ll='LC_COLLATE=C ls -lFh --all --all --color-scale --git --time-style=long-iso'
  dir() {
    LL=$(ll --group-directories-first "${@}")
    echo "${LL}" | ${PAGER:-less}
  }
elif ls --color=always -d . >/dev/null 2>&1; then
  alias ls='\ls --color=always'
elif ls -G -d . >/dev/null 2>&1; then # colorls is main system ls already
  alias ls='\ls -G'
elif colorls -G -d . >/dev/null 2>&1; then
  alias ls='\colorls -G'
else # Solaris or other *NIX
  alias ls='\ls'
fi

alias key='\man -k'
alias info='info --vi-keys'
alias sicp='racket -i -p neil/sicp -l xrepl'
alias agp='ag --pager=less'
#shellcheck disable=SC2139
alias tmuxt="sh ~/dotfiles/.tmux.${HOST:-$HOSTNAME}"
alias svim='nvim -u ~/contrib/SpaceVim/init.vim'

# Suffix aliases

if alias -s >/dev/null 2>&1; then
  alias -s php=nvim
  alias -s css=nvim
  alias -s scss=nvim
  alias -s js=nvim
fi

# Functions, used where aliases would break

cdl() {
  cd "${@}" && ll .
}

cdd() {
  cd "${@}" && dir .
}

echoerr() {
  printf "%s\n" "$*" >&2;
}

path() {
  echo "${PATH}" | tr ':' '\n'
}

catmd() {
  TMPFILE="$(mktemp -d)/index.html"

  echo "${TMPFILE}"

  pandoc -s -S --self-contained -c ~/.pandoc/buttondown.css \
    -t html5 -f markdown_phpextra "${@}" -o "${TMPFILE}"

  if command -v "${BROWSER}" >/dev/null 2>&1; then
    ${BROWSER} "${TMPFILE}"
  elif command -v "elinks" >/dev/null 2>&1; then
    elinks -force-html "file://${TMPFILE}"
  else
    lynx -force_html "file://${TMPFILE}"
  fi
}

dosass() {
  if [ "${#}" -eq 1 ]; then
    OUT_FILE="$(dirname "${1}")/$(basename -s .scss "${1}").css"
  else
    OUT_FILE="${2}"
  fi

  sassc -mlt nested "${1}" "${OUT_FILE}"
}

hgdiff() {
  nvim -d -c 'map q :qa!<CR>' <(hg cat "$1") "$1"
}

playtime() {
  if [ -x /usr/local/bin/soxi ]; then
    soxi -d "${@}" 2>&1
  else
    echo "soxi is not installed"
  fi
}

# from https://unix.stackexchange.com/a/67541
pushterms() {
  infocmp -x | ssh -t "${@}" 'cat > "~/nuterm.info" && tic -x "~/$nuterm.info"'
}

# Given a domain name, make a wildcard certificate for all its subdomains.
#
# @param string Domain Name
sscerts() {
  ME=$(whoami)
  TMPFILE="$(mktemp -d)/v3.ext"
  DOMAIN=${1}

  cat <<-EOL > "${TMPFILE}"
authorityKeyIdentifier=keyid,issuer
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = ${1}
DNS.2 = *.${1}
EOL

  if [ -f "./${1}.key" ]; then
    KEY_OPT='-key'
  else
    KEY_OPT='-keyout'
  fi

  \openssl req -new -newkey rsa:4096 -sha256 -nodes ${KEY_OPT} "./${1}.key" -out "./${1}.csr" \
    -subj "/CN=*.${1}/O=DavidTheMachine/OU=None/C=US/ST=California/L=Anaheim"
  echo ${ext3} >> "${TMPFILE}"
  \sudo \openssl x509 -days 3653 -sha256 -req -in "./${1}.csr" \
    -CA "/usr/share/ca-certificates/localhost-rootCA.pem" \
    -CAkey "${HOME}/.config/ssl/rootCA.key" -CAcreateserial \
    -out "./${1}.pem" -extfile "${TMPFILE}"
  \sudo \chown ${ME}:${ME} "./${1}.pem"
}

sssh() {
  (autossh -t "${1}" 'if tmux has; then tmux -2u attach; else tmux -2u new; fi') 2>/dev/null
}

superupdate() {
  if [ -z "$(apt >/dev/null 2>&1)" ]; then
    \sudo \sh -c " \
      \apt update && \
      \apt -y upgrade && \
      \apt -y full-upgrade && \
      \apt-get -y autoclean && \
      \apt -y autoremove && \
      \apt-get -y clean"
  elif [ -z "$(apt-get >/dev/null 2>&1)" ]; then
    \sudo \sh -c " \
      \apt-get update && \
      \apt-get -y upgrade && \
      \apt-get -y dist-upgrade && \
      \apt-get -y autoclean && \
      \apt-get -y autoremove && \
      \apt-get -y clean"
  elif [ -z "$(portsnap >/dev/null 2>&1)" ]; then # XXX rewrite as pkg
    \sudo \sh -c " \
      \portsnap fetch update && \
      \sudo \portmaster -aD && \
      \sudo \pkg2ng && \
      \sudo \freebsd-update fetch &&
      \sudo \freebsd-update install"
  else
    echoerr "This script is not configured for your system."
  fi
}

vman() {
  if [ -x /usr/bin/nvim ]; then
    if [ "${#}" -eq 2 ]; then
      /usr/bin/nvim -R "man://${2}(${1})"
    else
      /usr/bin/nvim -R "man://${1}"
    fi
  else
    /usr/bin/man "${@}"
  fi
}

# I'm keeping the following around for historical reference
# mountpub() {
#   sudo mount -t cifs -o username=ARI/darceneaux,rw,file_mode=0666,dir_mode=0777 \\\\10.10.10.12\\Public /mnt/Public
# }
#
# mountfr() {
#   sudo mount -t cifs -o username=ARI/darceneaux,rw,file_mode=0666,dir_mode=0777 \\\\10.10.10.12\\Fundraising /mnt/Fundraising
# }
#
# mountvbox() {
#   ssh -fNg -L 3306:127.0.0.1:3306 vbox # mysql tunnel
#   ssh -fNg -L 5432:127.0.0.1:5432 vbox # postgres tunnel
#   sshfs -C -o idmap=user,nonempty,transform_symlinks,allow_other,BatchMode=yes vbox:/var/www /var/www
# }
#
# # delete grep cache, not sure how to generalize it
# dgc() {
#   rm -rf $(grep -l '<!-- http://aynrandlexicon.com/lexicon/quote_of_the_day.html' /var/www/libraries/cache/*.cache)
#   curl -I -s http://aynrandlexicon.com/lexicon/quote_of_the_day.html > /dev/null
# }
#
# tarlm() {
#   if [ ! -f $1.access.$2.tgz ]; then
#     sudo tar -zvcf $1.access.$2.tgz $1.access.$2*.log && sudo rm $1.access.$2*.log
#   fi
#   if [ ! -f $1.error.$2.tgz ]; then
#     sudo tar -zvcf $1.error.$2.tgz $1.error.$2*.log && sudo rm $1.error.$2*.log
#   fi
# }
#
# movetrash() {
#   if [ ! -d ~/.Trash ]; then
#     mkdir ~/.Trash
#   fi
#   mv "${*}" ~/.Trash
# }
#
# alias cycapache='/usr/bin/sudo /usr/bin/pkill -SIGQUIT -U www; /bin/sleep 2; /usr/bin/sudo /usr/sbin/apachectl start'
# alias rm='movetrash'
