#!/usr/bin/env zsh

alias ll='ls -alFgh'
alias doge='doge -mh $(($(tput lines) -1))'
alias expected_install='./autogen.sh && ./configure --prefix=$HOME/.local && make install clean'
alias nvf='nvim $(fzf)'
alias nvdno='nvim $(git dno @~1)'
alias snvim='sudo -E $(which nvim)'

dir() {
  {
    LL=$(ll "${@}")
    echo "${LL}" | awk '/^d/ {print $0}'
    echo "${LL}" | awk '! /^(d|total)/ {print $0}'
    echo "${LL}" | awk '/^total/ {print $0}'
  } | ${PAGER:-less}
}

if lsd >/dev/null 2>&1; then
  alias ls=lsd
  dir() {
    LL=$(ll --color=always --icon=always "${@}")
    echo "${LL}" | ${PAGER:-less}
  }
elif ls --color=always -d . >/dev/null 2>&1; then
  alias ls='\ls --color=always'
elif ls -G -d . >/dev/null 2>&1; then # colorls is main system ls already
  alias ls='\ls -G'
elif colorls -G -d . >/dev/null 2>&1; then
  alias ls='\colorls -G'
else # Solaris or other *NIX
  alias ls='\ls'
fi

alias key='\man -k'
alias info='info --vi-keys'
alias sicp='racket -i -p neil/sicp -l xrepl'
alias rgp='rg --pager=${PAGER}'
alias venv='python -m venv'
alias jsonize='jq .'

# Suffix aliases
if alias -s >/dev/null 2>&1; then
  alias -s css=nvim
  alias -s md=nvim
  alias -s rst=nvim
  alias -s scss=nvim
  alias -s txt=nvim
  alias -s php=nvim
  alias -s json=jsonize
fi

# Functions, used where aliases would break
cdl() {
  cd "${@}" && ll .
}

cdd() {
  cd "${@}" && dir .
}

echoerr() {
  printf "%s\n" "${*}" >&2;
}

path() {
  echo "${PATH}" | tr ':' '\n'
}

catmd() {
  TMPFILE="$(mktemp -d)/index.html"

  printf "${TMPFILE}\n"

  pandoc -s --self-contained -c ~/.pandoc/buttondown.css \
    --metadata title="${@}" \
    -t html5 -f gfm+smart "${@}" -o "${TMPFILE}"

  if command -v "wslview" >/dev/null 2>&1; then
    wslview $(wslpath -w "${TMPFILE}")
  elif command -v "${BROWSER}" >/dev/null 2>&1; then
    ${BROWSER} "${TMPFILE}"
  elif command -v "elinks" >/dev/null 2>&1; then
    elinks -force-html "file://${TMPFILE}"
  else
    lynx -force_html "file://${TMPFILE}"
  fi
}

hgdiff() {
  nvim -d -c 'map q :qa!<CR>' <(hg cat "$1") "$1"
}

# from https://unix.stackexchange.com/a/67541
pushterms() {
  infocmp -x | ssh -t "${@}" 'cat > "~/nuterm.info" && tic -x "~/$nuterm.info"'
}

sssh() {
  (TERM=screen-256color autossh -t "${1}" 'source ${HOME}/dotfiles/.aliases && tmuxt') 2>/dev/null
}

superupdate() {
  if [ -z "$(apt >/dev/null 2>&1)" ]; then
    /usr/bin/sudo /usr/bin/sh -c "/usr/bin/apt update && \
/usr/bin/apt -y upgrade && \
/usr/bin/apt -y full-upgrade && \
/usr/bin/apt -y autoclean && \
/usr/bin/apt -y autoremove && \
/usr/bin/apt -y clean"
  elif [ -z "$(pacman >/dev/null 2>&1)" ]; then
    \sudo \sh -c "pacman -Syu && flatpak update -y && yay -Syu --devel --needed"
  elif [ -z "$(apt-get >/dev/null 2>&1)" ]; then
    \sudo \sh -c " \
      \apt-get update && \
      \apt-get -y upgrade && \
      \apt-get -y dist-upgrade && \
      \apt-get -y autoclean && \
      \apt-get -y autoremove && \
      \apt-get -y clean"
  elif [ -z "$(portsnap >/dev/null 2>&1)" ]; then # XXX rewrite as pkg
    \sudo \sh -c " \
      \portsnap fetch update && \
      \sudo \portmaster -aD && \
      \sudo \pkg2ng && \
      \sudo \freebsd-update fetch &&
      \sudo \freebsd-update install"
  else
    echoerr "This script is not configured for your system."
  fi

  if typeset -f superupdate_local > /dev/null; then
    superupdate_local
  fi
}

pushkey() {
  if [ $# -eq 0 ]; then
    printf "
no input blah blah
" 1>&2
    return 1
  fi
  cat "${1}" | \
    ssh "${2}" "mkdir -p ~/.ssh ; cat >> ~/.ssh/authorized_keys ; chmod 700 ~/.ssh && chmod 600 ~/.ssh/authorized_keys"
}

# compare to the output of `git ls-tree -r @`
git_id() {
  printf 'blob %s\0' "$(ls -l "$1" | awk '{print $5;}')" | cat - "$1" | sha1sum | awk '{print $1}'
}
